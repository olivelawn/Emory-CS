	(print '(--- You are going to talk to a psychiatrist\. Type in your statement inside) )
	(terpri)
	(print '(--- parentheses like (i am very sad) or (what do you mean) with all) )
	(terpri)
	(print '(--- characters in lower case\. To say nothing type nothing inside parentheses\.) )
	(terpri)
	(print '(--- Don't use commas\. Don't use parentheses inside the enclosing))
	(terpri)
	(print '(--- parentheses\.  Try to use complete sentences to get better)) 
	(terpri)
	(print '(--- responses\. Be honest to your doctor\. Don't be shy\. If you get) )
	(terpri)
	(print '(--- frustrated you may type in something like (go to hell) or whatever))
	(terpri)
	(print '(--- you want to say to the doctor\. To terminate type (bye) simply\. ) )
	(terpri)
	(print '(--- CNTRL Z will get you out at any time to the operating system lelevl \. ))
	(terpri)
	(terpri)
	(print '(--- --- --- Now the session starts\. Type in your response))
    (setq s (youmemap (read)))
    (cond ((match '(bye) s) (exit) )
          ((match '(you are (* x)) s) (print (append '(DR\.---please 
									  tell me \.\.\. why you are) x)) )
          ((match '(you have (* x)) s) (print (append '(DR\.--- how
											   long have you had) x)) )
											   the same way) ))
          ((match '(because (* x)) s) (print '(DR\.--- is that really the reason) ))
          ((match '((* y) are me going (* x)) s) (print (append (append '(Dr\.--- i dont know) y) '(i am going) x)) )
          ((match '(are me (* x)) s) (print '(Dr\.--- hey you know it\.  ) ) )
		  ((match '((verbp v) (* x)) s)
		  ((member 'dream s) (print '(Dr\.--- for dream analysis see FREUD)))
     (go loop-----) ) )
(defun youmemap (lst)
  (mapcar (function youme) lst) )
(defun youme (w)
  (cond  ((eq w 'i)    'you)
         ((eq w 'my)   'your)
         ((eq w 'mine) 'yours)
         ((eq w 'me)   'you)
         ((eq w 'you)  'me)
         ((eq w 'your) 'my)
         ((eq w 'yours) 'mine)
         ((eq w 'am)   'are)
		 ((eq w 'myself) 'yourself)
		 ((eq w 'yourself) 'myself)
		 (t w) ) )


 ;;------match.l-------

 ;;---(1) Question mark, ?, plays a wild card---
 ;;---(1) Star mark, *, plays wild cards---


(defun  match  (A B)
   (cond 
      ((null A)  (null B))
      ((or  (atom A)  (atom B))  nil)
      ((equal  (first A)  (first B))
         (match  (rest A)  (rest B)))
      ((and 
            (not (atom (first A)))       
            (equal  (length (first A)) 2)
            (eq (caar A)  '?)
            (match (cdr A)  (cdr B)))
         (set (cadar  A)  (car B)) T)
      ((and 
            (not (atom (first A)))
            (equal  (length (first A)) 2)
            (eq (caar A)  '*))
         (cond
            ((match (cdr A) B)
               (set (cadar A) nil) t)
            ((and A (match (rest A) (rest B)))
               (set (cadar A) (list (car B))) t)
            ((and A (match A (cdr B)))
               (set (cadar A) (cons (car B) (eval (cadar A))) ) t)
       (t nil))) ))

;;(defun w_word ()
;;  (prog () (setq w_wordcount (add1  w_wordcount))
;;      (return  (getnth w_wordcount '(when why where) )) ) )
;;(defun w_pred (w)
;;  (member w '(why where when what)) )
;;(defun d_pred (w)
;;  (member w '(do can should would)) )
;;(defun getnth (n lst)
;;  (cond ((null lst) nil)
;;			  fill put turn compute think drink blink crash crunch add) ) )
(doctor1)
