%Parker Johnson
%Maximum Sub-Sequence in Prolog

append([], Y, Y).
append([H|X], Y, [H|X]) :- append(X, Y, Z).

%this fact adds an element to the head of a list
etol(X, Y, [X|Y]).

%this set of rules was copied from "The Prolog Handbook."  Since putting elements on
%the back of the list is too hard.  I put the elements on the head and then reverse it afterwards.
reverse(X, Y) :- reconc(X, [], Y).
revconc([], L, L).
revconc([X|L1], L2, L3) :- revconc(L1, [X|L2], L3).

%this is the "base case."  When the list is 'cdred' down to the empty list, since the maxsum
%and Sub-Sequence has been built on the fly, then the values are ready to print.
mss([], Msum,Tsum, Mlist, Clist) :- write('Maximum Sum ='), 
 				 write(Msum),
				 write('Maximum Sub Sequence ='),
				 reverse(Mlist, tmp),
				 write(tmp).

%this is the case that this_sum is greater than or equal to than the max_sum.  This_sum is
%sent as both this_sum and max_sum.  The head is etol'd to the current list and then the
%current list is sent as both the current list and the maximumlist.
mss([X|A], Msum,Tsum, Mlist, Clist) :- L is Tsum + X,
				       L >= Msum,
				       etol(X, Clist, Z),
				       mss(A, L, L, Z, Z).

%this is the case where this_sum is less than 0.  Max_sum is retained, This_sum is set to 0,
%the maximum list is retained, the empty list is sent as the current list.
mss([X|A], Msum,Tsum, Mlist, Clist) :- L is Tsum + X,
				       L < 0,
				       mss(A, Msum, 0, Mlist, []).

%this is the case where this_sum is greater than zero, but this_sum is not greater than max_sum.
%i.e. this_sum is >= 0.   The head is etol'd to the current list.  The maximum list is sent as the
%maximum list and the new current listis sent as the current list.
mss([X|A], Msum,Tsum, Mlist, Clist) :- L is Tsum + X,
				       L >= 0,
				       etol(X, Clist, Z),
				       mss(A, Msum, L, Mlist, Z).








