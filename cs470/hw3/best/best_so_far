; Prof Chodrow-
; This program is not perfect, but it is pretty darn close.
; parker johnson
; monday april 13
; maximum sequence sum in sceme


(define (first x) (car x))     ; redefinition of car & cdr for LISP folk 
(define (rest x) (cdr x))
(define (empty? x) (null? x))  ; redefinition of empty  
(define (back x y) (append y (list x)))  ; adds an element to back of list

; mss sets up the test function

(define (mss seq) (test seq 0 0 '() '() 0 -999) )

; test takes in the following arguments from mss.  a sequence, this_sum, max_sum
; (both initialized by mss to be 0) a seq1 and a seq2 (both initialized to be empty lists
; by mss) a flag var (init to 0 by mss) and a value which I used for tracing purposes
; when trying to debug this messy thing.  There are 4 different conditionals which call 
; test recursively.  seq1 contains the sequence which we want to contan the max-sub-seq
; when we exit from test.  seq2 is a tmp list which is built in the case that a negative
; num is found such that tmp_this_sum < 0.  If such a number is found and a larger max_sum
; is found after the first one, than the two lists are swapped and the seq2 list is sent
; an empty list '()  (see func # 3--last arg to test!).  If the flag = 1 then there is the
; possibility of a swap -- if max_sum is later changed.  If no number numbers are found it
; just continues build ing the list.

(define (test x this_sum max_sum seq1 seq2 flag which)
  (cond ((empty? x) (cons max_sum (list seq1)))
        (else (let* ((tmp_this_sum (+ (car x) this_sum)))
         (cond ((and (> tmp_this_sum max_sum) (= flag 0)) (test (rest x) tmp_this_sum tmp_this_sum (back (car x) seq1 ) (back (car x) seq2) flag 1))
	       ((and (> tmp_this_sum max_sum) (= flag 1)) (test (rest x) tmp_this_sum tmp_this_sum (back (car x) seq2) '() 0 2))
	       (else (if (< tmp_this_sum 0) (test (rest x) 0 max_sum seq1 '() 1 3)
		       	  (test (rest x) tmp_this_sum max_sum seq1 (back (car x) seq2) 1 4))))))))














