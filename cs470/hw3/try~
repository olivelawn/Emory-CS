(define (first x) (car x))
(define (rest x) (cdr x))
(define (empty? x) (null? x))
(define (back x y) (append y (list x)))


(define (mss seq) (test seq 0 0 '() -999 ) )



(define (test x this_sum max_sum seq whichf)
  (cond ((empty? x) (cons max_sum (list seq)))
        (else (let* ((tmp_this_sum (+ (car x) this_sum))) 
		(if (> tmp_this_sum max_sum) (test (rest x) tmp_this_sum tmp_this_sum (back (car x) seq ) 1)
		  (if (< tmp_this_sum 0) (test (rest x) 0 max_sum '() 2)
		    (test (rest x) tmp_this_sum max_sum (back (car x) seq) 3)))))))


(define (show seq) (max seq 0 0 -999 ) )

(define (max x this_sum max_sum seq)
  (cond ((empty? x) max_sum)
        (else (let* ((tmp_this_sum (+ (car x) this_sum))) 
		(if (> tmp_this_sum max_sum) (max (rest x) tmp_this_sum tmp_this_sum 1)
		  (if (< tmp_this_sum 0) (max (rest x) 0 max_sum 2)
		    (max (rest x) tmp_this_sum max_sum 3)))))))


