(define (first x) (car x))
(define (rest x) (cdr x))
(define (empty? x) (null? x))

(define (flatten x)
  (cond ((null? x) x)
        ((not (pair? x)) (list x))
        (else (append (flatten (car x))
		      (flatten (cdr x)) ))))

(define (bind-all keys values env)
  (append (map list keys values) env) )


(define (mss seq) (max seq 0 0) )



(define (max x this_sum max_sum)
  (cond ((empty? x) max_sum)
        (else (let* ((tmp_this_sum (+ (car x) this_sum))) 
		(if (> tmp_this_sum max_sum) (max (rest x) tmp_this_sum tmp_this_sum)
		  (if (< tmp_this_sum 0) (max (rest x) 0 max_sum)
		    (max (rest x) tmp_this_sum max_sum)))))))



