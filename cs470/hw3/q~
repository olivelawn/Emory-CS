(define (first x) (car x))
(define (rest x) (cdr x))
(define (empty? x) (null? x))



(define (mss seq) (max seq 0 0 -999) )


(define (max x this_sum max_sum)
  (cond ((empty? x) max_sum)
        (else (let* ((tmp_this_sum (+ (car x) this_sum))) 
		(if (> tmp_this_sum max_sum) (max (rest x) tmp_this_sum tmp_this_sum 1)
		  (if (< tmp_this_sum 0) (max (rest x) 0 max_sum 2)
		    (max (rest x) tmp_this_sum max_sum 3)))))))



(define (inner seq) (help seq 0 0 -999) )


(define ( x this_sum max_sum)
  (cond ((empty? x) max_sum)
        (else (let* ((tmp_this_sum (+ (car x) this_sum))) 
		(if (> tmp_this_sum max_sum) (max (rest x) tmp_this_sum tmp_this_sum 1)
		  (if (< tmp_this_sum 0) (max (rest x) 0 max_sum 2)
		    (max (rest x) tmp_this_sum max_sum 3)))))))
